import requests
from bs4 import BeautifulSoup

stocks = [
"AALR3",
"ABCB4",
"ABEV3",
"ADHM3",
"AERI3",
"AESB3",
"AFLT3",
"AGRO3",
"AGXY3",
"AHEB3",
"AHEB6",
"ALLD3",
"ALPA3",
"ALPA4",
"ALPK3",
"ALSO3",
"ALUP1",
"ALUP3",
"ALUP4",
"AMAR3",
"AMBP3",
"AMER3",
"ANIM3",
"APER3",
"ARML3",
"ARZZ3",
"ASAI3",
"ATMP3",
"ATOM3",
"AURA3",
"AURE3",
"AVLL3",
"AZEV3",
"AZEV4",
"AZUL4",
"B3SA3",
"BAHI3",
"BALM3",
"BALM4",
"BAUH4",
"BAZA3",
"BBAS3",
"BBDC3",
"BBDC4",
"BBSE3",
"BDLL3",
"BDLL4",
"BEEF3",
"BEES3",
"BEES4",
"BGIP3",
"BGIP4",
"BIOM3",
"BLAU3",
"BLUT3",
"BLUT4",
"BMEB3",
"BMEB4",
"BMGB4",
"BMIN3",
"BMIN4",
"BMKS3",
"BMOB3",
"BNBR3",
"BOAS3",
"BOBR4",
"BPAC1",
"BPAC3",
"BPAC5",
"BPAN4",
"BRAP3",
"BRAP4",
"BRBI1",
"BRFS3",
"BRGE1",
"BRGE1",
"BRGE3",
"BRGE5",
"BRGE6",
"BRGE8",
"BRIT3",
"BRIV3",
"BRIV4",
"BRKM3",
"BRKM5",
"BRKM6",
"BRML3",
"BRPR3",
"BRSR3",
"BRSR5",
"BRSR6",
"BSLI3",
"BSLI4",
"BTTL3",
"CALI3",
"CAMB3",
"CAML3",
"CASH3",
"CBAV3",
"CBEE3",
"CCRO3",
"CEAB3",
"CEBR3",
"CEBR5",
"CEBR6",
"CEDO3",
"CEDO4",
"CEEB3",
"CEEB5",
"CEED3",
"CEED4",
"CGAS3",
"CGAS5",
"CGRA3",
"CGRA4",
"CIEL3",
"CLSA3",
"CLSC3",
"CLSC4",
"CMIG3",
"CMIG4",
"CMIN3",
"COCE5",
"COGN3",
"CPFE3",
"CPLE1",
"CPLE3",
"CPLE5",
"CPLE6",
"CRDE3",
"CRFB3",
"CRIV3",
"CRIV4",
"CRPG3",
"CRPG5",
"CRPG6",
"CSAB3",
"CSAB4",
"CSAN3",
"CSED3",
"CSMG3",
"CSNA3",
"CSRN3",
"CSRN5",
"CSRN6",
"CSUD3",
"CTKA3",
"CTKA4",
"CTNM3",
"CTNM4",
"CTSA3",
"CTSA4",
"CURY3",
"CVCB3",
"CXSE3",
"CYRE3",
"DASA3",
"DESK3",
"DEXP3",
"DEXP4",
"DIRR3",
"DMFN3",
"DMMO3",
"DMVF3",
"DOHL3",
"DOHL4",
"DOTZ3",
"DTCY3",
"DXCO3",
"EALT3",
"EALT4",
"ECOR3",
"EGIE3",
"EKTR3",
"EKTR4",
"ELET3",
"ELET6",
"ELMD3",
"EMAE4",
"EMBR3",
"ENAT3",
"ENBR3",
"ENEV3",
"ENGI1",
"ENGI3",
"ENGI4",
"ENJU3",
"ENMT3",
"ENMT4",
"EPAR3",
"EQMA3",
"EQPA3",
"EQPA5",
"EQPA7",
"EQTL3",
"ESPA3",
"ESTR4",
"ETER3",
"EUCA3",
"EUCA4",
"EVEN3",
"EZTC3",
"FESA3",
"FESA4",
"FHER3",
"FIQE3",
"FLRY3",
"FRAS3",
"FRIO3",
"FRTA3",
"GEPA3",
"GEPA4",
"GETT3",
"GETT4",
"GFSA3",
"GGBR3",
"GGBR4",
"GGPS3",
"GMAT3",
"GOAU3",
"GOAU4",
"GOLL4",
"GPAR3",
"GPIV3",
"GRND3",
"GSHP3",
"GUAR3",
"HAGA3",
"HAGA4",
"HAPV3",
"HBOR3",
"HBRE3",
"HBSA3",
"HBTS5",
"HETA4",
"HOOT4",
"HYPE3",
"IFCM3",
"IGBR3",
"IGTI1",
"IGTI3",
"INEP3",
"INEP4",
"INTB3",
"IRBR3",
"ITSA3",
"ITSA4",
"ITUB3",
"ITUB4",
"JALL3",
"JBSS3",
"JFEN3",
"JHSF3",
"JOPA3",
"JOPA4",
"JPSA3",
"JSLG3",
"KEPL3",
"KLBN1",
"KLBN3",
"KLBN4",
"KRSA3",
"LAVV3",
"LEVE3",
"LIGT3",
"LIPR3",
"LJQQ3",
"LLIS3",
"LOGG3",
"LOGN3",
"LPSB3",
"LREN3",
"LUPA3",
"LUXM4",
"LVTC3",
"LWSA3",
"MATD3",
"MBLY3",
"MDIA3",
"MDNE3",
"MEAL3",
"MEGA3",
"MELK3",
"MERC4",
"MGEL4",
"MGLU3",
"MILS3",
"MLAS3",
"MNDL3",
"MNPR3",
"MOAR3",
"MODL3",
"MOVI3",
"MRFG3",
"MRSA3",
"MRSA3",
"MRSA5",
"MRSA5",
"MRSA6",
"MRSA6",
"MRVE3",
"MSPA4",
"MTRE3",
"MTSA4",
"MULT3",
"MWET3",
"MWET4",
"MYPK3",
"NEOE3",
"NEXP3",
"NGRD3",
"NINJ3",
"NORD3",
"NTCO3",
"ODPV3",
"OFSA3",
"OIBR3",
"OIBR4",
"ONCO3",
"OPCT3",
"ORVR3",
"OSXB3",
"PARD3",
"PATI3",
"PCAR3",
"PDGR3",
"PDTC3",
"PEAB3",
"PEAB4",
"PETR3",
"PETR4",
"PETZ3",
"PFRM3",
"PGMN3",
"PINE4",
"PLAS3",
"PLPL3",
"PMAM3",
"PNVL3",
"POMO3",
"POMO4",
"PORT3",
"POSI3",
"PRIO3",
"PRNR3",
"PSSA3",
"PTBL3",
"PTNT3",
"PTNT4",
"QUAL3",
"RADL3",
"RAIL3",
"RAIZ4",
"RANI3",
"RAPT3",
"RAPT4",
"RCSL3",
"RCSL4",
"RDNI3",
"RDOR3",
"RECV3",
"REDE3",
"RENT3",
"RNEW1",
"RNEW3",
"RNEW4",
"ROMI3",
"RPAD3",
"RPAD5",
"RPAD6",
"RPMG3",
"RRRP3",
"RSID3",
"RSUL4",
"SANB1",
"SANB3",
"SANB4",
"SAPR1",
"SAPR3",
"SAPR4",
"SBFG3",
"SBSP3",
"SCAR3",
"SEER3",
"SEQL3",
"SGPS3",
"SHOW3",
"SHUL4",
"SIMH3",
"SLCE3",
"SLED3",
"SLED4",
"SMFT3",
"SMTO3",
"SNSY5",
"SOJA3",
"SOMA3",
"SOND5",
"SOND6",
"SQIA3",
"STBP3",
"SULA1",
"SULA3",
"SULA4",
"SUZB3",
"SYNE3",
"TAEE1",
"TAEE3",
"TAEE4",
"TASA3",
"TASA4",
"TCSA3",
"TECN3",
"TEKA4",
"TELB3",
"TELB4",
"TEND3",
"TFCO4",
"TGMA3",
"TIMS3",
"TKNO4",
"TOTS3",
"TPIS3",
"TRAD3",
"TRIS3",
"TRPL3",
"TRPL4",
"TTEN3",
"TUPY3",
"TXRX4",
"UCAS3",
"UGPA3",
"UNIP3",
"UNIP5",
"UNIP6",
"USIM3",
"USIM5",
"USIM6",
"VALE3",
"VAMO3",
"VBBR3",
"VIIA3",
"VITT3",
"VIVA3",
"VIVR3",
"VIVT3",
"VLID3",
"VULC3",
"VVEO3",
"WEGE3",
"WEST3",
"WHRL3",
"WHRL4",
"WIZS3",
"WLMM3",
"WLMM4",
"YDUQ3",
"ZAMP3",
]

earnigs_yield = []

#Cabeçalhos
headers = {
'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36',
 }

for stock in stocks:
    # Define a URL do site a ser visitado
    url = 'https://statusinvest.com.br/acoes/' + stock

    # Faz a requisição GET na URL
    response = requests.get(url, headers=headers)

    # Verifica se a requisição foi bem-sucedida
    if response.status_code == 200:
        # Cria um objeto BeautifulSoup com o conteúdo HTML da página
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # Encontra a div com o title "Indicar se a empresa é ou não lucrativa"
        div_lucratividade = soup.find('div', {'title': lambda x: x and 'Indicar se a empresa é ou não lucrativa' in x})

        # Encontra o elemento strong dentro da div
        strong_lucratividade = div_lucratividade.find('strong')
        
        # Extrai o valor do elemento strong para o LPA
        valor_lucratividade = strong_lucratividade.text

        # Encontra a primeira div cujo atributo "title" é igual a "Valor atual do ativo"
        div_valor_ativo = soup.find('div', {'title': 'Valor atual do ativo'})

         # Encontra o elemento strong dentro da div
        strong_valor_ativo = div_valor_ativo.find('strong')
        
        # Extrai o valor do elemento strong para o valor da ação
        valor_ativo = strong_valor_ativo.text

        # Calcula Earning Yield
        ey = (float(valor_lucratividade.replace(',','.')) / float(valor_ativo.replace(',','.'))) * 100

        # Arredonda o resultado do earning yield
        round_ey = round(ey,2)
        
        # Exibe os resultados
        print('Valor atual do ativo:', valor_ativo)
        print('Valor da lucratividade:', valor_lucratividade)
        print('EY:', round_ey)

        # Cria uma tupla com o nome da ação e o seu earning yield
        tupla = (stock, round_ey)

        # Salva o resultado em nosso array declarado lá acima
        earnigs_yield.append(tupla)

    else:
        print('Erro ao acessar o site:', response.status_code)

print('Ranking ordenado pelo earning yield')

# Exibindo o resultados ordenado de forma decrescente pelo ey
earnigs_yield.sort(key=lambda a: a[1], reverse=True)
for stock in earnigs_yield:
    print(stock[0] + ": " + str(stock[1]))
